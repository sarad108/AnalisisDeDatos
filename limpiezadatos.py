# -*- coding: utf-8 -*-
"""LimpiezaDatos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PD3RJMeblr_LJf8HSOvodt1mStGP5dVM
"""

#Importamos la librería Pandas
import pandas as pd
import datetime as dt
import missingno as msno
import matplotlib.pyplot as plt
import seaborn as sns

# Leer el archivo desde un csv
csv_path="https://docs.google.com/spreadsheets/d/e/2PACX-1vSVKFGEcuRGE8xY-d57JsGQQ9tLg6N5q4ULASEsfnuX07dzmLD8n7bWlqYLd2abmXT0HJYP09npYTFq/pub?output=csv"
df=pd.read_csv(csv_path,sep=",",header=None)
df.head()

#Crear la lista headers
headers=["Education","JoiningYear","City","PaymentTier","Age","Gender","EverBenched","ExperienceInCurrentDomain","LeaveOrNot"]
df.columns=headers
df.head(100)

#La función dtypes genera una tabla con el tipo de dato de cada columna
df.dtypes

# Lista de los nuevos nombres de las columnas
nuevos_nombres = ["Educación", "AñoIngreso", "Ciudad", "NivelPago", "Edad", "Género", "AlgunaVezEnLaBanca", "ExpDominioActual","SalirONo"]

# Asigna los nuevos nombres a las columnas
df.columns = nuevos_nombres

#Generamos la tabla para verificar el cambio
df.head(100)

#Identificar y manejar los valores no válidos
df['Edad'] = pd.to_numeric(df['Edad'], errors='coerce')

#Eliminar las filas con valores no válidos
df.dropna(subset=['Edad'], inplace=True)

#Convertir las columnas con números a int
df['Edad'] = df['Edad'].astype(int)
df['AñoIngreso'] = df['AñoIngreso'].astype(int)
df['NivelPago'] = df['NivelPago'].astype(int)
df['ExpDominioActual'] = df['ExpDominioActual'].astype(int)

# Verifica el tipo de datos después de la conversión
df.dtypes

# Reemplazar "1" por "Sí" y "0" por "No" en la columna "SalirONo"
df['SalirONo'] = df['SalirONo'].replace({'1': 'Si', '0': 'No'})

# Reemplazamos "Bachelors" por "Bachiller" y "Masters" por "Maestría" en la columna "Educación"
df['Educación'] = df['Educación'].replace({"Bachelors": "Bachiller", "Masters": "Maestría"})

#Remplazamos "Female" por "Femenino" y "Male" por "Masculino" em la columna "Género"
df['Género'] = df['Género'].replace({"Female":"Femenino", "Male":"Masculino"})

#Reemplazamos "Yes" por "Si" en la columna "AlgunaVezEnLaBanca"
df['AlgunaVezEnLaBanca'] = df['AlgunaVezEnLaBanca'].replace({"Yes":"Si"})

#Verificamos si los cambios se ejecutaron correctamente
df.head()

# Eliminar filas con valores faltantes
df.dropna(subset=['Educación'], inplace=True)
df.dropna(subset=['AñoIngreso'], inplace=True)
df.dropna(subset=['Ciudad'], inplace=True)
df.dropna(subset=['NivelPago'], inplace=True)
df.dropna(subset=['Edad'], inplace=True)
df.dropna(subset=['Género'], inplace=True)
df.dropna(subset=['AlgunaVezEnLaBanca'], inplace=True)
df.dropna(subset=['ExpDominioActual'], inplace=True)
df.dropna(subset=['Educación'], inplace=True)

#Calculamos el número de filas nulas en el DataFrame
numero_de_filas_nulas = df.isnull().sum().sum()

#Imprimimos el resuoltado que nos arroja la ejecución del código anterior para verificar
print("Número total de filas nulas:", numero_de_filas_nulas)

#Verificar el número de filas duplicadas
duplicados = df.duplicated()
print("Número de filas duplicadas:", duplicados.sum())

#erificamos si la columna de edades tiene valores dentro de un rango válido
edades_validas = (df['Edad'] >= 0) & (df['Edad'] <= 100)
print("Valores de edad fuera del rango válido:", (~edades_validas).sum())

#Podemos observar los valores únicos de cada columna
VU = df.nunique()
print("Valores únicos en cada columna:")
print(VU)

#Calculamos la mediana de los años de experiencia
mediana_experiencia = df['ExpDominioActual'].median()

#Imprimimos el resultado
print("Mediana de Años de Experiencia:", mediana_experiencia)

# Contar la cantidad de registros por ciudad
ciudades_counts = df['Ciudad'].value_counts()

#imprimimos la lista de ciudades y asu frecuencia en la data
print("Tendencia de Ciudades:")
print(ciudades_counts)

# Define los rangos de edades
bins = [0, 20, 30, 40, 50, 60, float('inf')]
labels = ['0-20', '21-30', '31-40', '41-50', '51-60', '60+']

# Agrupa las edades en los rangos definidos
df['Grupo de Edad'] = pd.cut(df['Edad'], bins=bins, labels=labels, right=False)

#Contamos la cantidad de personas de cada género en cada grupo de edad
data = df.groupby(['Grupo de Edad', 'Género']).size().unstack()

#Creamos un gráfico de barras apiladas
plt.figure(figsize=(5, 5))
data.plot(kind='bar', stacked=True, colormap='coolwarm')

#Lo personalizamos
plt.title('Distribución de Género por Grupo de Edad')
plt.xlabel('Edad')
plt.ylabel('Cantidad Personas')


#Visualizamos el gráfico
plt.legend(title='Género')
plt.show()

#Definimos los rangos de edades
bins = [0, 20, 30, 40, 50, 60, float('inf')]
labels = ['0-20', '21-30', '31-40', '41-50', '51-60', '60+']

# Agrupa las edades en los rangos definidos
df['Grupo de Edad'] = pd.cut(df['Edad'], bins=bins, labels=labels, right=False)

#Contamos la cantidad de personas en cada grupo de edad
data = df['Grupo de Edad'].value_counts().sort_index()

#Creamos el gráfico de barras
plt.figure(figsize=(5, 5))
data.plot(kind='bar', color='skyblue', edgecolor='black')

#Lo personalizamos
plt.title('Distribución de Personas por Grupo de Edad')
plt.xlabel('Edad')
plt.ylabel('Cantidad Personas')

#Por último lo visualizamos
plt.show()

#Contamos la cantidad de votos 'Sí' y 'No' en la columna 'SalirONo'
votos_counts = df['SalirONo'].value_counts()

#Creamos un gráfico de pastel
plt.figure(figsize=(5, 5))
plt.pie(votos_counts, labels=votos_counts.index, autopct='%1.1f%%', colors=['lightblue', 'lightcoral'])

#Lo personalizamos
plt.title('Distribución de Votos (Sí vs No)')

#Visualizamos el grafico
plt.show()

# Crear un boxplot de la edad con su columna correspondiente
plt.figure(figsize=(7, 5))
plt.boxplot(df['Edad'], vert=False)

# Personalizar el gráfico
plt.title('Boxplot de Edad')
plt.xlabel('Edad')

# Mostrar el gráfico
plt.show()